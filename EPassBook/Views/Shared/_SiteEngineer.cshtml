@model EPassBook.Models.InstallmentDetailsViewModel
@{
    if (ViewBag.Message != null)
    {
         Layout = "~/Views/Shared/_Layout.cshtml";
    }
}
<style>
    #errmsgB, #errmsgL, .errmsg {
        color: red;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/css/bootstrap-select.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.13.1/js/bootstrap-select.min.js"></script>

<div id="siteengineer">

    @if (!Model.IsRecommended)
    {
        <section class="content" id="firstDiv">
            <div class="row">
                <!-- left column -->
                <div class="col-md-12">
                    <div class="box box-primary">
                        <div class="box-header with-border">
                        </div>
                        <div class="box-body">
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.Label("Select Comment", "Select Comment", htmlAttributes: new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-9">
                                        <select class="selectpicker form-control" multiple data-live-search="false">
                                            <option>Centre line is not proper</option>
                                            <option>Foundation state to rest foundation in not hard</option>
                                            <option>Column footing reinforcement is not as per design/properly laid</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.Label("Comment", htmlAttributes: new { @class = "control-label" })
                                    </div>
                                    <div class="col-md-9">
                                        @*@Html.TextArea("txtFirstComment", null, 5, 5, new { @class = "form-control" })*@
                                        @Html.TextBoxFor(model => model.FirstComment, htmlAttributes: new { @class = "form-control", @id = "txtFirstComment" })
                                        <div style="height:20px">
                                            <span id="commentError" class="errmsg"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-offset-4 col-md-10">
                                    <input type="button" value="Recommend" id="recommend" class="btn btn-primary" />
                                    <input type="button" value="Reject" id="reject" class="btn btn-danger" />
                                </div>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }

    <section class="content" id="secondDiv">
        <div class="row">
            <!-- left column -->
            <div class="col-md-12">
                <div class="box box-primary">
                    <div class="box-header with-border">

                    </div>
                    @using (Html.BeginForm("SiteEngineer", "WorkFlow", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal" }))
                    {
                        <div class="box-body">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <div class="form-group" style="display:none">
                                @Html.LabelFor(model => model.InstallmentId, "InstallmentID", htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.HiddenFor(m => m.InstallmentId)
                                </div>
                            </div>
                            <div class="form-horizontal" id="secondDiv">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.InstallmentId, "InstallmentID", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.HiddenFor(m => m.InstallmentId)
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.BeneficiaryId, "BeneficiaryId", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.HiddenFor(m => m.BeneficiaryId)
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.BeneficiaryAmnt, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.BeneficiaryAmnt, new { htmlAttributes = new { @class = "form-control", @id = "txtBenAmnt" } })&nbsp;<span id="errmsgB"></span>
                                        @Html.ValidationMessageFor(model => model.BeneficiaryAmnt, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.DisplayFor(model => model.beniInRupees, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                        <label id="lblBeniAmntRupees"></label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsCentreAmnt, "State Assistance", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="checkbox">
                                            @*@Html.RadioButton("IsRadioButton", "State Assistance")*@
                                            <input type="radio" name="IsRadioButton" id="isrdo_1" value="State Assistance">@Html.Label("State Assistance")
                                            @Html.ValidationMessageFor(model => model.IsCentreAmnt, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.IsCentreAmnt, "Central Assistance", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="checkbox">
                                            @*@Html.RadioButton("IsRadioButton", "Central Assistance")*@
                                            <input type="radio" name="IsRadioButton" id="isrdo_2" value="Central Assistance">@Html.Label("Central Assistance")
                                            @Html.ValidationMessageFor(model => model.IsCentreAmnt, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.LoanAmnt, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.LoanAmnt, new { htmlAttributes = new { @class = "form-control", @id = "txtLAmnt" } })&nbsp;<span id="errmsgL"></span>
                                        @Html.ValidationMessageFor(model => model.LoanAmnt, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-6">
                                        @Html.DisplayFor(model => model.lInRupees, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                                        <label id="lblAmntLRupees"></label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ConstructionLevel, "Via RTGS/DBT to the beneficiary for the plan as first instalmentafter digging of the foundation.", htmlAttributes: new { @class = "control-label col-md-7" })
                                    <div class="col-md-3">
                                        @Html.DropDownListFor(model => model.ConstructionLevel, new SelectList(new List<object>
                                            {
                                            new{ value=0, text="A" },
                                            new{ value=1, text="B" },
                                            new{ value=2, text="C" },
                                            },
                                            "value",
                                            "text"),"Select Items",
                                            new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ConstructionLevel, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.StageID, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.StageID, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.StageID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.IsCompleted, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.IsCompleted)
                                            @Html.ValidationMessageFor(model => model.IsCompleted, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.InstallmentNo, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.InstallmentNo, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.InstallmentNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model._Comments, "Comments", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(model => model._Comments, 3, 100, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model._Comments, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.CreatedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.CreatedBy, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.ModifiedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ModifiedDate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModifiedDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group" style="display:none">
                                    @Html.LabelFor(model => model.ModifiedBy, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ModifiedBy, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ModifiedBy, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.HiddenFor(model => model.CompanyID, "Company ID")
                                    <div class="col-md-10">
                                        @Html.HiddenFor(m => m.CompanyID)
                                        @Html.ValidationMessageFor(model => model.CompanyID, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ModifiedBy, "Upload Photo", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-5">
                                        <img id="imgsite" src="" alt="your image" class="img-thumbnail col-md-12" style="height:200px" />
                                        <input type="file" value="Upload" id="imguploadsiteeng" name="imguploadsiteeng" onchange="readURL(this, 'imgsite')" class="btn btn-primary col-md-7" />
                                        <input type="button" id="btnimg1cencal" onclick="removeimg('imgsite','imguploadsiteeng')" value="Cancel" class="btn btn-danger col-md-4 pull-right" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        @Html.CheckBox("ChkSign", "no") @Html.Label("Central Assistance")
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <label id="lblmsg" class="text-danger"></label>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input id="hiddforRadio"
                                               name="hiddforRadio"
                                               type="hidden"
                                               value="no" />
                                        <input id="hiddforCheckbox"
                                               name="hiddforCheckbox"
                                               type="hidden"
                                               value="no" />
                                    </div>
                                </div>
                                <div class="box-footer">
                                    <input type="submit" value="Send to Project Engineer" onclick="return validation();" class="btn btn-primary" />
                                </div>
                            </div>

                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
</div>

@if (!EPassBook.Helper.AuthorizationForView.IsAuthorize(EPassBook.Helper.Common.SiteEngineer))
{
    <script type="text/javascript">
        $(document).ready(function () {
            $('#siteengineer').find(':input').prop('disabled', true);
        });
    </script>
}

@if (ViewBag.Message != null)
{
    <script type="text/javascript">
        window.onload = function () {
            $('#firstDiv').hide();
            alert("submited successfully");
            window.location.href = "/WorkFlow/Index/";
        };
    </script>
}

<script type="text/javascript">

    $(document).ready(function () {

            var check = '@Model.IsRecommended';
            //TODO
            check = check.toLowerCase();
            if (check == 'true')
            {
                $('#secondDiv').show();
                $('#firstDiv').hide();
            }
            else
            {
                $('#secondDiv').hide();
                $('#firstDiv').show();
            }
    $('select').selectpicker();
        $(".selectpicker").change(function () {
            var countries = [];
            $.each($(".selectpicker option:selected"), function () {
                countries.push($(this).val());
            });
            $("#txtFirstComment").val(countries.join(", "));
            //alert("You have selected the country - " + countries.join(", "));
        });


        $("#recommend").click(function ()
        {
            var comment = $("#txtFirstComment").val();
            var installmentId=@Model.InstallmentId;
            if (comment == '') {
                $("#commentError").html("Comment is required").show().fadeOut("slow");
                return false;
            }
            var installmentDetailViewModel = {};
            installmentDetailViewModel.FirstComment = comment;
            installmentDetailViewModel.installmentId = installmentId;
            $.ajax({
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                url: "/WorkFlow/Recommend",
                data: JSON.stringify(installmentDetailViewModel),
                success: (function (response){
                    alert('success');
                    $('#secondDiv').show();
                    $('#firstDiv').hide();
                }),
                failure: (function (response) {
                    alert('failure');
                    return false;
                }),
                error: (function (xhr, textStatus, errorThrown)
                {
                    if (textStatus != "error"){
                        alert(textStatus);
                        $('#secondDiv').show();
                        $('#firstDiv').hide();
                    }
                    else if (xhr.status === 401 || xhr.status === 403){
                        alert(errorThrown);
                        window.location.href = "/WorkFlow/Index/";
                    }
                })
            });
        });
        $("#reject").click(function () {
            var comment = $("#txtFirstComment").val();
            var installmentId = @Model.InstallmentId;
            if (comment == '') {
                $("#commentError").html("Comment is required").show().fadeOut("slow");
                return false;
            }
            var installmentDetailViewModel = {};
            installmentDetailViewModel.FirstComment = comment;
            installmentDetailViewModel.installmentId = installmentId;
            $.ajax({
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                url: "/WorkFlow/Reject",
                data: JSON.stringify(installmentDetailViewModel),
                success: (function (response) {
                    alert('Beneficiary Rejected');
                    window.location.href = "/WorkFlow/Index/";
                }),
                failure: (function (response) {
                    alert('failure');
                    return false;
                }),
                error: (function (xhr, textStatus, errorThrown) {
                    if (textStatus != "error") {
                        alert(textStatus);
                        $('#firstDiv').show();
                        $('#secondDiv').hide();
                    }
                    else if (xhr.status === 401 || xhr.status === 403) {
                        alert(errorThrown);
                        window.location.href = "/WorkFlow/Index/";
                    }
                })
            });
        });

        $("#txtBenAmnt").keyup(function () {
            $("#lblBeniAmntRupees").text('');
            var amnt = $(this).val();
            $.ajax(
                {
                    type: "POST",
                    url: '/WorkFlow/ToWords?number=' + amnt,
                    success: (function (response) {
                        $("#lblBeniAmntRupees").text(response);
                    })
                });
        });
        $("#txtLAmnt").keyup(function () {
            $("#lblAmntLRupees").text('');
            var amnt = $(this).val();
            $.ajax(
                {
                    type: "POST",
                    url: '/WorkFlow/ToWords?number=' + amnt,
                    success: (function (response) {
                        $("#lblAmntLRupees").text(response);
                    })
                });
        });

        //for numbers validations only
        //called when key is pressed in textbox
        $("#txtBenAmnt").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsgB").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });
        $("#txtLAmnt").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
                //display error message
                $("#errmsgL").html("Digits Only").show().fadeOut("slow");
                return false;
            }
        });
    });

    $("#isrdo_1, #isrdo_2").change(function () {
        if ($("#isrdo_1").is(":checked")) {
            $("#hiddforRadio").val("Checked");
        }
        else if ($("#isrdo_2").is(":checked")) {
            $("#hiddforRadio").val("Checked");
        }
    });

    var isstatecenter = '@Model.IsCentreAmnt';
    if (isstatecenter != '') {
        if (isstatecenter.toLocaleLowerCase() == 'true') {
            $("#isrdo_1").attr("checked", false);
            $("#isrdo_2").attr("checked", true);
        }
        else {
            $("#isrdo_1").attr("checked", true);
            $("#isrdo_2").attr("checked", false);
        }
    }

    $("#ChkSign").change(function () {
        if ($("#ChkSign").is(":checked")) {
            $("#hiddforCheckbox").val("Checked");
        }
    });

    function validation() {
        debugger;
        if ($("#txtLAmnt").val().trim() == "") {
            $("#lblmsg").text("Please Enter Loan Amount");
            return false;
        }
        if ($("#hiddforRadio").val() == "no") {
            $("#lblmsg").text("Please select State Assistance or Center Assistance");
            return false;
        }
        if ($("#hiddforCheckbox").val() == "no") {
            $("#lblmsg").text("Please sign in to confirm your submission");
            return false;
        }

        return true;
    }

    function readURL(input, id) {
        //alert(id);
        if (input.files && input.files[0]) {
            var reader = new FileReader();

            if (id == 'imgsite') {
                reader.onload = function (e) {
                    $('#imgsite')
                        .attr('src', e.target.result);
                };
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

    function removeimg(img, fileupld) {
        document.getElementById(img).removeAttribute('src');
        document.getElementById(fileupld).value = "";

    }

</script>
